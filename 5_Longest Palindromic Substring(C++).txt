class Solution {
public:
    string longestPalindrome(string s) {
        int pre = 0,after = 0;
        int maxLen = 0;
        string result;
        for(int i=0;i<s.length();i++)
        {
            pre = i;
            after = i;
            while(1)
            {
                if(pre<0 || after>s.length()-1 || s[pre]!=s[after])
                {
                    if((after-1)-(pre+1)+1>maxLen)
                    {
                        maxLen = (after-1)-(pre+1)+1;
                        result = s.substr(pre+1,maxLen);//用下标pre+1开始，截取长度为maxLen的子串
                    }
                    break;
                }
                pre--;
                after++;
            }
        }
        for(int i=0;i<s.length()&&s.length()>=2;i++)
        {
            pre = i;
            after = i+1;
            while(1)
            {
                if(pre<0 || after>s.length()-1 || s[pre]!=s[after])
                {
                    if((after-1)-(pre+1)+1>maxLen)
                    {
                        maxLen = (after-1)-(pre+1)+1;
                        result = s.substr(pre+1,maxLen);//用下标pre+1开始，截取长度为maxLen的子串
                    }
                    break;
                }
                pre--;
                after++;
            }
        }
    return result;
    }
};